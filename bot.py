import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è
NAME, RATING, COMMENT, ADMIN_PASSWORD = range(4)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("data.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS reviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        rating INTEGER,
        comment TEXT
    )
''')
conn.commit()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data='write')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='view')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'write':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return NAME

    elif query.data == 'view':
        cursor.execute("SELECT * FROM reviews")
        reviews = cursor.fetchall()
        if reviews:
            msg = ""
            for r in reviews:
                msg += f"{r[0]}. –ò–º—è: {r[1]} | –û—Ü–µ–Ω–∫–∞: {r[2]} | –û—Ç–∑—ã–≤: {r[3]}\n"
        else:
            msg = "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."
        await query.message.reply_text(msg)
        return ConversationHandler.END

    elif query.data == 'delete_all':
        cursor.execute("DELETE FROM reviews")
        conn.commit()
        await query.message.reply_text("–í—Å–µ –æ—Ç–∑—ã–≤—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return ConversationHandler.END

# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data['name'] = name

    if name.lower() == "–∞–¥–º–∏–Ω":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return ADMIN_PASSWORD

    # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    buttons = [[KeyboardButton(str(i))] for i in range(1, 6)]
    await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç 1 –¥–æ 5:",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    )
    return RATING

# –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
async def check_admin_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text.strip()
    if password == "0808":
        keyboard = [[InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data='delete_all')]]
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=markup)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    return ConversationHandler.END

# –û—Ü–µ–Ω–∫–∞
async def get_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rating'] = int(update.message.text)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:")
    return COMMENT

# –û—Ç–∑—ã–≤
async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data['name']
    rating = context.user_data['rating']
    comment = update.message.text

    cursor.execute("INSERT INTO reviews (name, rating, comment) VALUES (?, ?, ?)", (name, rating, comment))
    conn.commit()

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")

    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data='write')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='view')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    TOKEN = "8052836652:AAF1reVL92MM5QMH_DrVEk-5p-6EA7KN0hg"
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ADMIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_admin_password)],
            RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rating)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
